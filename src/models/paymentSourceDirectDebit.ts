/**
 * Monoova Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  lazy,
  literal,
  number,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import { DirectDebit, directDebitSchema } from './directDebit';
import { Disbursement1, disbursement1Schema } from './disbursement1';
import { FinancialTransaction } from './financialTransaction';

/** payment source from directDebit. */
export interface PaymentSourceDirectDebit extends FinancialTransaction {
  directDebit?: DirectDebit;
  /** This description will be displayed on the mAccount statements. If any disbursement object is present, this description will be overwritten. This description will only display on statements for payments directly into the sign in mAccount (ie no disbursement object) */
  description?: string;
  /** Reference will appear on payers statement. Only used when the source object is a bank account, May be overwritten for some account configurations, contact us for more details. */
  lodgementReference?: string;
  disbursements?: Disbursement1[];
}

export const paymentSourceDirectDebitSchema: Schema<any> = object({
  directDebit: ['directDebit', optional(lazy(() => directDebitSchema))],
  description: ['description', optional(string())],
  lodgementReference: ['lodgementReference', optional(string())],
  disbursements: [
    'disbursements',
    optional(array(lazy(() => disbursement1Schema))),
  ],
  uniqueReference: ['uniqueReference', optional(string())],
  printUniqueReferenceOnStatement: [
    'printUniqueReferenceOnStatement',
    optional(boolean()),
  ],
  totalAmount: ['totalAmount', optional(number())],
  paymentSource: ['paymentSource', optional(literal('directDebit'))],
});
