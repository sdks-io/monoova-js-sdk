/**
 * Monoova Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import {
  DTOMWalletCloseResponseV1,
  dTOMWalletCloseResponseV1Schema,
} from '../models/dTOMWalletCloseResponseV1';
import {
  DTOMWalletCreateResponseV1,
  dTOMWalletCreateResponseV1Schema,
} from '../models/dTOMWalletCreateResponseV1';
import {
  DTOMWalletGetFinancialsResponseV1,
  dTOMWalletGetFinancialsResponseV1Schema,
} from '../models/dTOMWalletGetFinancialsResponseV1';
import {
  DTOMWalletReopenResponseV1,
  dTOMWalletReopenResponseV1Schema,
} from '../models/dTOMWalletReopenResponseV1';
import {
  DTOMWalletResetPinResponseV1,
  dTOMWalletResetPinResponseV1Schema,
} from '../models/dTOMWalletResetPinResponseV1';
import {
  DTOMWalletSearchResponseV1,
  dTOMWalletSearchResponseV1Schema,
} from '../models/dTOMWalletSearchResponseV1';
import {
  DTOMWalletTransactionsResponseV1,
  dTOMWalletTransactionsResponseV1Schema,
} from '../models/dTOMWalletTransactionsResponseV1';
import {
  DTOMWalletUpdateResponseV1,
  dTOMWalletUpdateResponseV1Schema,
} from '../models/dTOMWalletUpdateResponseV1';
import { MWalletCreate, mWalletCreateSchema } from '../models/mWalletCreate';
import {
  MWalletResetPin,
  mWalletResetPinSchema,
} from '../models/mWalletResetPin';
import {
  MWalletTransactions,
  mWalletTransactionsSchema,
} from '../models/mWalletTransactions';
import { MWalletUpdate, mWalletUpdateSchema } from '../models/mWalletUpdate';
import { bigint, number, optional, string } from '../schema';
import { BaseController } from './baseController';

export class MWalletController extends BaseController {
  /**
   * This API creates a new mWallet. This creation process has been mandated by BPAY Pty Ltd as part of
   * the license to use BPAY as a payment method. Ideally client software should mask the pin from the
   * merchant and get the customer to key in the pin number twice to ensure accuracy and to maintain
   * privacy. The pin and the Date of Birth Fields are the ultimate authentication fields that a customer
   * has to allow the payment. If the customer forgets their pin then it can be reset using the ResetPin
   * function. The customer must supply a birth date (or any other significant date) that matches the one
   * that is registered. If a customer queries why a birth date is needed as part of the registration
   * process then it is for this reason. Note: Though specified as a birth date any date of significance
   * would be appropriate. There is no date range checking to check for age etc. The date is used to
   * allow changes to the pin only.
   *
   * @param body
   * @return Response from the API call
   */
  async mWalletCreate(
    body?: MWalletCreate,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DTOMWalletCreateResponseV1>> {
    const req = this.createRequest('POST', '/mWallet/v1/create');
    const mapped = req.prepareArgs({
      body: [body, optional(mWalletCreateSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ApiError, 'Bad request');
    req.throwOn(500, ApiError, 'Internal Server Error');
    return req.callAsJson(dTOMWalletCreateResponseV1Schema, requestOptions);
  }

  /**
   * This API will reopen an mWallet that was closed.
   *
   * @param accountNumber 16-Digit account number that uniquely identifies the mWallet
   * @param pin           4 digit numerical pin.
   * @return Response from the API call
   */
  async mWalletReopen(
    accountNumber: string,
    pin: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DTOMWalletReopenResponseV1>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      accountNumber: [accountNumber, string()],
      pin: [pin, number()],
    });
    req.appendTemplatePath`/mWallet/v1/reopen/${mapped.accountNumber}/${mapped.pin}`;
    req.throwOn(400, ApiError, 'Bad request');
    req.throwOn(500, ApiError, 'Internal Server Error');
    return req.callAsJson(dTOMWalletReopenResponseV1Schema, requestOptions);
  }

  /**
   * This API returns an array of mWallets whose authentication fields match the search criteria
   * specified by the identifier. Mobile phone, land line and 16 - Digit mWallet account numbers have all
   * non - numbers stripped and email address is converted to lower case. This is the first function to
   * call when trying to identify a customer with an mWallet. The key piece of information returned for
   * each mWallet is the unique accountNumber that is used in later calls and in the payment gateway.
   *
   * @param identifier Mobile phone number, email address, landline number or the 16-Digit mWallet account
   *                             number
   * @return Response from the API call
   */
  async mWalletSearch(
    identifier?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DTOMWalletSearchResponseV1>> {
    const req = this.createRequest('GET', '/mWallet/v1/search');
    const mapped = req.prepareArgs({
      identifier: [identifier, optional(string())],
    });
    req.query('identifier', mapped.identifier);
    req.throwOn(400, ApiError, 'Bad request');
    req.throwOn(500, ApiError, 'Internal Server Error');
    return req.callAsJson(dTOMWalletSearchResponseV1Schema, requestOptions);
  }

  /**
   * This API will set an account to be closed and no further financial transactions can be performed in
   * the Engine.
   *
   * @param accountNumber 16-Digit account number that uniquely identifies the mWallet
   * @param pin           4 digit numerical pin.
   * @return Response from the API call
   */
  async mWalletCloseV1(
    accountNumber: bigint,
    pin: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DTOMWalletCloseResponseV1>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      accountNumber: [accountNumber, bigint()],
      pin: [pin, number()],
    });
    req.appendTemplatePath`/mWallet/v1/close/${mapped.accountNumber}/${mapped.pin}`;
    req.throwOn(400, ApiError, 'Bad request');
    req.throwOn(500, ApiError, 'Internal Server Error');
    return req.callAsJson(dTOMWalletCloseResponseV1Schema, requestOptions);
  }

  /**
   * This API will return an array of transactions for an mWallet between two dates. Paging is supported
   * by using the skip and take properties of the mWalletTransactionRequestDetails class. The information
   * retrieved is in real - time and represents the same details as displayed on an mAccounts financial
   * statement.
   *
   * @param body
   * @return Response from the API call
   */
  async mWalletTransactions(
    body?: MWalletTransactions,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DTOMWalletTransactionsResponseV1>> {
    const req = this.createRequest('POST', '/mWallet/v1/transactions');
    const mapped = req.prepareArgs({
      body: [body, optional(mWalletTransactionsSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ApiError, 'Bad request');
    req.throwOn(500, ApiError, 'Internal Server Error');
    return req.callAsJson(
      dTOMWalletTransactionsResponseV1Schema,
      requestOptions
    );
  }

  /**
   * This API will return the current financials for an mWallet.
   *
   * @param accountNumber 16-Digit account number that uniquely identifies the mWallet
   * @param pin           4 digit numerical pin.
   * @return Response from the API call
   */
  async mWalletGetFinancials(
    accountNumber: bigint,
    pin: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DTOMWalletGetFinancialsResponseV1>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      accountNumber: [accountNumber, bigint()],
      pin: [pin, number()],
    });
    req.appendTemplatePath`/mWallet/v1/financials/${mapped.accountNumber}/${mapped.pin}`;
    req.throwOn(400, ApiError, 'Bad request');
    req.throwOn(500, ApiError, 'Internal Server Error');
    return req.callAsJson(
      dTOMWalletGetFinancialsResponseV1Schema,
      requestOptions
    );
  }

  /**
   * This API resets a customer's mWallet PIN. The Date of Birth is used to authenticate the user. This
   * API should be used when a customer has forgotten their pin.
   *
   * @param body
   * @return Response from the API call
   */
  async mWalletResetPin(
    body?: MWalletResetPin,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DTOMWalletResetPinResponseV1>> {
    const req = this.createRequest('POST', '/mWallet/v1/resetPin');
    const mapped = req.prepareArgs({
      body: [body, optional(mWalletResetPinSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ApiError, 'Bad request');
    req.throwOn(500, ApiError, 'Internal Server Error');
    return req.callAsJson(dTOMWalletResetPinResponseV1Schema, requestOptions);
  }

  /**
   * This API updates an mWallet. This update process has been mandated by BPAY Pty Ltd as part of the
   * license to use BPAY as a payment method. The pin or dateOfBirth Dates are not updatable.
   *
   * @param body
   * @return Response from the API call
   */
  async mWalletUpdate(
    body?: MWalletUpdate,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DTOMWalletUpdateResponseV1>> {
    const req = this.createRequest('POST', '/mWallet/v1/update');
    const mapped = req.prepareArgs({
      body: [body, optional(mWalletUpdateSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ApiError, 'Bad request');
    req.throwOn(500, ApiError, 'Internal Server Error');
    return req.callAsJson(dTOMWalletUpdateResponseV1Schema, requestOptions);
  }
}
