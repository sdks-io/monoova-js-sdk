/**
 * Monoova Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import {
  DTOPublicPingResponseV1,
  dTOPublicPingResponseV1Schema,
} from '../models/dTOPublicPingResponseV1';
import { BaseController } from './baseController';

export class TestingReferenceDataController extends BaseController {
  /**
   * This endpoint returns the public key used by Monoova to sign messages.The public key is encoded as a
   * hexadecimal string. This public key should be expected to change every 1 year and should be updated
   * accordingly.
   *
   * @return Response from the API call
   */
  async publicCertificatePublicKey(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<NodeJS.ReadableStream | Blob>> {
    const req = this.createRequest('GET', '/public/v1/certificate/public-key');
    req.throwOn(400, ApiError, 'Bad request');
    req.throwOn(500, ApiError, 'Internal Server Error');
    return req.callAsStream(requestOptions);
  }

  /**
   * The primary purpose of the ping API is to validate that the Engine servers are up and running.
   *
   * @return Response from the API call
   */
  async publicPing(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DTOPublicPingResponseV1>> {
    const req = this.createRequest('GET', '/public/v1/ping');
    req.throwOn(400, ApiError, 'Bad request');
    req.throwOn(500, ApiError, 'Internal Server Error');
    return req.callAsJson(dTOPublicPingResponseV1Schema, requestOptions);
  }

  /**
   * This endpoint returns an X509 certificate which contains the public key that can be used to verify
   * messages sent by Monoova. The certificate returned is short lived (1 year validity) and should be
   * updated accordingly.
   *
   * @return Response from the API call
   */
  async publicCertificate(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET', '/public/v1/certificate');
    req.throwOn(400, ApiError, 'Bad request');
    req.throwOn(500, ApiError, 'Internal Server Error');
    return req.call(requestOptions);
  }
}
