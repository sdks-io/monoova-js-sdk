/**
 * Monoova Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import {
  DTOVerifyAccountGetResponseV1,
  dTOVerifyAccountGetResponseV1Schema,
} from '../models/dTOVerifyAccountGetResponseV1';
import {
  DTOVerifyAccountInitiateResponseV1,
  dTOVerifyAccountInitiateResponseV1Schema,
} from '../models/dTOVerifyAccountInitiateResponseV1';
import {
  DTOVerifyAccountInitiateResponseV2,
  dTOVerifyAccountInitiateResponseV2Schema,
} from '../models/dTOVerifyAccountInitiateResponseV2';
import {
  DTOVerifyAccountListResponseV1,
  dTOVerifyAccountListResponseV1Schema,
} from '../models/dTOVerifyAccountListResponseV1';
import {
  DTOVerifyAccountUpdateResponseV1,
  dTOVerifyAccountUpdateResponseV1Schema,
} from '../models/dTOVerifyAccountUpdateResponseV1';
import {
  DTOVerifyAccountValidateResponseV1,
  dTOVerifyAccountValidateResponseV1Schema,
} from '../models/dTOVerifyAccountValidateResponseV1';
import { VerifyInitiate, verifyInitiateSchema } from '../models/verifyInitiate';
import { VerifyUpdate, verifyUpdateSchema } from '../models/verifyUpdate';
import { VerifyValidate, verifyValidateSchema } from '../models/verifyValidate';
import { optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class VerifyController extends BaseController {
  /**
   * Inititiates a verification transaction against a designated bank account.
   *
   * @param body
   * @return Response from the API call
   */
  async verifyAccountInitiate(
    body?: VerifyInitiate,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DTOVerifyAccountInitiateResponseV1>> {
    const req = this.createRequest('POST', '/verify/v1/aba/initiate');
    const mapped = req.prepareArgs({
      body: [body, optional(verifyInitiateSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ApiError, 'Bad request');
    req.throwOn(500, ApiError, 'Internal Server Error');
    return req.callAsJson(
      dTOVerifyAccountInitiateResponseV1Schema,
      requestOptions
    );
  }

  /**
   * Update the following fields for a verified account&#39;s without reverifying the bank account. Bank
   * Account Title, Has DDR authority
   *
   * @param body
   * @return Response from the API call
   */
  async verifyAccountUpdate(
    body?: VerifyUpdate,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DTOVerifyAccountUpdateResponseV1>> {
    const req = this.createRequest('POST', '/verify/v1/aba/update');
    const mapped = req.prepareArgs({
      body: [body, optional(verifyUpdateSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ApiError, 'Bad request');
    req.throwOn(500, ApiError, 'Internal Server Error');
    return req.callAsJson(
      dTOVerifyAccountUpdateResponseV1Schema,
      requestOptions
    );
  }

  /**
   * Initiates a verification transaction against a designated bank account or PayID via NPP rail using
   * the v2 endpoint.
   *
   * @param body
   * @return Response from the API call
   */
  async verifyNPPAccountPayIdInitiate(
    body?: unknown,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DTOVerifyAccountInitiateResponseV2>> {
    const req = this.createRequest('POST', '/verify/v2/aba/initiate');
    const mapped = req.prepareArgs({ body: [body, optional(unknown())] });
    req.json(mapped.body);
    req.throwOn(400, ApiError, 'Bad request');
    req.throwOn(500, ApiError, 'Internal Server Error');
    return req.callAsJson(
      dTOVerifyAccountInitiateResponseV2Schema,
      requestOptions
    );
  }

  /**
   * Validates a code against a token generated via the initiate call. After 3 failed attempts the token
   * will get locked for 1 hour. Users can retry with same token after 1 hour or initiate a new
   * verification anytime.
   *
   * @param body
   * @return Response from the API call
   */
  async verifyAccountValidate(
    body?: VerifyValidate,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DTOVerifyAccountValidateResponseV1>> {
    const req = this.createRequest('POST', '/verify/v1/aba/validate');
    const mapped = req.prepareArgs({
      body: [body, optional(verifyValidateSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ApiError, 'Bad request');
    req.throwOn(500, ApiError, 'Internal Server Error');
    return req.callAsJson(
      dTOVerifyAccountValidateResponseV1Schema,
      requestOptions
    );
  }

  /**
   * Get a list of all verified bank accounts.
   *
   * @return Response from the API call
   */
  async verifyAccountList(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DTOVerifyAccountListResponseV1>> {
    const req = this.createRequest('GET', '/verify/v1/aba/list');
    req.throwOn(400, ApiError, 'Bad request');
    req.throwOn(500, ApiError, 'Internal Server Error');
    return req.callAsJson(dTOVerifyAccountListResponseV1Schema, requestOptions);
  }

  /**
   * Return details for a specific verification token.
   *
   * @param token Generated Token from verify/v1/aba/initiate (Initiates a verification transaction)
   * @return Response from the API call
   */
  async verifyAccountGet(
    token: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DTOVerifyAccountGetResponseV1>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ token: [token, string()] });
    req.appendTemplatePath`/verify/v1/aba/get/${mapped.token}`;
    req.throwOn(400, ApiError, 'Bad request');
    req.throwOn(500, ApiError, 'Internal Server Error');
    return req.callAsJson(dTOVerifyAccountGetResponseV1Schema, requestOptions);
  }
}
