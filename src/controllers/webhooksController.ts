/**
 * Monoova Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  EventDirectEntryDishonoursWebhook,
  eventDirectEntryDishonoursWebhookSchema,
} from '../models/eventDirectEntryDishonoursWebhook';
import {
  EventInboundDirectCreditWebhook,
  eventInboundDirectCreditWebhookSchema,
} from '../models/eventInboundDirectCreditWebhook';
import {
  EventInboundDirectDebitWebhook,
  eventInboundDirectDebitWebhookSchema,
} from '../models/eventInboundDirectDebitWebhook';
import {
  EventInboundRtgsImtStatus,
  eventInboundRtgsImtStatusSchema,
} from '../models/eventInboundRtgsImtStatus';
import {
  EventNppPaymentStatusWebhook,
  eventNppPaymentStatusWebhookSchema,
} from '../models/eventNppPaymentStatusWebhook';
import {
  EventNppReturnWebhook,
  eventNppReturnWebhookSchema,
} from '../models/eventNppReturnWebhook';
import {
  EventPayToreceivePaymentWebhook,
  eventPayToreceivePaymentWebhookSchema,
} from '../models/eventPayToreceivePaymentWebhook';
import {
  EventPendingrtgsImtWebhook,
  eventPendingrtgsImtWebhookSchema,
} from '../models/eventPendingrtgsImtWebhook';
import {
  EventReceivePaymentWebhook,
  eventReceivePaymentWebhookSchema,
} from '../models/eventReceivePaymentWebhook';
import { number, optional, string } from '../schema';
import { BaseController } from './baseController';

export class WebhooksController extends BaseController {
  /**
   * When an NPP payment is received, Monoova will send a callback with the below format. To subscribe to
   * a webhook use the <a href="/payments#tag/Subscriptions"> Subscriptions </a> APIs. Event name:&nbsp;
   * <strong>NPPReceivePayment</strong> <br/>
   *
   * @param authorization
   * @param verificationSignature  This is a base64 encoded cryptographic
   *                                                                    signature that should be used<br/> to verify
   *                                                                    both the integrity of the message as well as
   *                                                                    the source (Monoova). <br/> The signature's
   *                                                                    hashing method is SHA256 and the public key can
   *                                                                    be retrieved from <a
   *                                                                    href="/payments#operation/PublicCertificatePubl
   *                                                                    icKey"> /public/v1/certificate/public-key </a>.
   * @param webhookid              Unique Id to identify this webhook
   *                                                                    notification.
   * @param body
   * @return Response from the API call
   */
  async receivablesReceivePaymentWebhook(
    authorization?: string,
    verificationSignature?: string,
    webhookid?: number,
    body?: EventReceivePaymentWebhook,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/RECEIVEPAYMENTWEBHOOK_TARGET_URL');
    const mapped = req.prepareArgs({
      authorization: [authorization, optional(string())],
      verificationSignature: [verificationSignature, optional(string())],
      webhookid: [webhookid, optional(number())],
      body: [body, optional(eventReceivePaymentWebhookSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('Authorization', mapped.authorization);
    req.header('Verification-Signature', mapped.verificationSignature);
    req.header('Webhookid', mapped.webhookid);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * Subscribing to the direct credit event webhook will allow us to notify you when an inbound direct
   * credit is received on one of your accounts. As direct credits arrive in batches, you will receive
   * the data in an JSON array with multiple transactions multiple times per day. Event name:&nbsp;
   * <strong>InboundDirectCredit</strong> <br/>
   *
   * @param authorization
   * @param verificationSignature  This is a base64 encoded cryptographic
   *                                                                         signature that should be used<br/> to
   *                                                                         verify both the integrity of the message
   *                                                                         as well as the source (Monoova). <br/> The
   *                                                                         signature's hashing method is SHA256 and
   *                                                                         the public key can be retrieved from <a
   *                                                                         href="/payments#operation/PublicCertificat
   *                                                                         ePublicKey"> /public/v1/certificate/public-
   *                                                                         key </a>.
   * @param webhookid              Unique Id to identify this webhook
   *                                                                         notification.
   * @param body
   * @return Response from the API call
   */
  async inboundDirectCreditWebhook(
    authorization?: string,
    verificationSignature?: string,
    webhookid?: number,
    body?: EventInboundDirectCreditWebhook,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'POST',
      '/INBOUNDDIRECTCREDITWEBHOOK_TARGET_URL'
    );
    const mapped = req.prepareArgs({
      authorization: [authorization, optional(string())],
      verificationSignature: [verificationSignature, optional(string())],
      webhookid: [webhookid, optional(number())],
      body: [body, optional(eventInboundDirectCreditWebhookSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('Authorization', mapped.authorization);
    req.header('Verification-Signature', mapped.verificationSignature);
    req.header('Webhookid', mapped.webhookid);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * Subscribing to the npp payment status event webhook will allow us to notify you when the status of a
   * pending NPP Payment gets updated. Event name:&nbsp;<strong>NppPaymentStatus</strong> <br/>
   * <strong>Note:&nbsp; </strong> Receive an NPP Payment Status Webhook notification when the status of
   * an NPP payment changes so you donâ€™t need to poll for updates.<br/>
   *
   * @param authorization
   * @param verificationSignature  This is a base64 encoded cryptographic
   *                                                                      signature that should be used<br/> to verify
   *                                                                      both the integrity of the message as well as
   *                                                                      the source (Monoova). <br/> The signature's
   *                                                                      hashing method is SHA256 and the public key
   *                                                                      can be retrieved from <a
   *                                                                      href="/payments#operation/PublicCertificatePu
   *                                                                      blicKey"> /public/v1/certificate/public-key
   *                                                                      </a>.
   * @param webhookid              Unique Id to identify this webhook
   *                                                                      notification.
   * @param body
   * @return Response from the API call
   */
  async nppPaymentStatus(
    authorization?: string,
    verificationSignature?: string,
    webhookid?: number,
    body?: EventNppPaymentStatusWebhook,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'POST',
      '/NPPPAYMENTSTATUSWEBHOOK_TARGET_URL'
    );
    const mapped = req.prepareArgs({
      authorization: [authorization, optional(string())],
      verificationSignature: [verificationSignature, optional(string())],
      webhookid: [webhookid, optional(number())],
      body: [body, optional(eventNppPaymentStatusWebhookSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('Authorization', mapped.authorization);
    req.header('Verification-Signature', mapped.verificationSignature);
    req.header('Webhookid', mapped.webhookid);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * When an NPP payment is received, Monoova will send a callback with the below format. To subscribe to
   * a webhook use the <a href="/payments#tag/Subscriptions"> Subscriptions </a> APIs. Event name:&nbsp;
   * <strong>PayToReceivePayment</strong> <br/>
   *
   * @param authorization
   * @param verificationSignature  This is a base64 encoded cryptographic
   *                                                                         signature that should be used<br/> to
   *                                                                         verify both the integrity of the message
   *                                                                         as well as the source (Monoova). <br/> The
   *                                                                         signature's hashing method is SHA256 and
   *                                                                         the public key can be retrieved from <a
   *                                                                         href="/payments#operation/PublicCertificat
   *                                                                         ePublicKey"> /public/v1/certificate/public-
   *                                                                         key </a>.
   * @param webhookid              Unique Id to identify this webhook
   *                                                                         notification.
   * @param body
   * @return Response from the API call
   */
  async payToReceivePaymentWebhook(
    authorization?: string,
    verificationSignature?: string,
    webhookid?: number,
    body?: EventPayToreceivePaymentWebhook,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/PayToReceivePayment_WEBHOOK_URL');
    const mapped = req.prepareArgs({
      authorization: [authorization, optional(string())],
      verificationSignature: [verificationSignature, optional(string())],
      webhookid: [webhookid, optional(number())],
      body: [body, optional(eventPayToreceivePaymentWebhookSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('Authorization', mapped.authorization);
    req.header('Verification-Signature', mapped.verificationSignature);
    req.header('Webhookid', mapped.webhookid);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * Subscribing to the direct debit event webhook will allow us to notify you when an inbound direct
   * debit is received on one of your accounts. As direct debits arrive in batches, you will receive the
   * data in an JSON array with multiple transactions multiple times per day. Event name:&nbsp;
   * <strong>InboundDirectDebit</strong> <br/> <br/> Note:&nbsp; Source account details do not appear by
   * default, please contact Monoova for further information <br/>
   *
   * @param authorization
   * @param verificationSignature  This is a base64 encoded cryptographic
   *                                                                        signature that should be used<br/> to
   *                                                                        verify both the integrity of the message as
   *                                                                        well as the source (Monoova). <br/> The
   *                                                                        signature's hashing method is SHA256 and
   *                                                                        the public key can be retrieved from <a
   *                                                                        href="/payments#operation/PublicCertificate
   *                                                                        PublicKey"> /public/v1/certificate/public-
   *                                                                        key </a>.
   * @param webhookid              Unique Id to identify this webhook
   *                                                                        notification.
   * @param body
   * @return Response from the API call
   */
  async inboundDirectDebitWebhook(
    authorization?: string,
    verificationSignature?: string,
    webhookid?: number,
    body?: EventInboundDirectDebitWebhook,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'POST',
      '/INBOUNDDIRECTDEBITWEBHOOK_TARGET_URL'
    );
    const mapped = req.prepareArgs({
      authorization: [authorization, optional(string())],
      verificationSignature: [verificationSignature, optional(string())],
      webhookid: [webhookid, optional(number())],
      body: [body, optional(eventInboundDirectDebitWebhookSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('Authorization', mapped.authorization);
    req.header('Verification-Signature', mapped.verificationSignature);
    req.header('Webhookid', mapped.webhookid);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * Subscribing to the direct entry dishonours event webhook will allow us to notify you when an
   * dishonour transaction is made. Event name:&nbsp;<strong>DirectEntryDishonour</strong> <br/>
   *
   * @param authorization
   * @param verificationSignature  This is a base64 encoded cryptographic
   *                                                                           signature that should be used<br/> to
   *                                                                           verify both the integrity of the message
   *                                                                           as well as the source (Monoova). <br/>
   *                                                                           The signature's hashing method is SHA256
   *                                                                           and the public key can be retrieved from
   *                                                                           <a
   *                                                                           href="/payments#operation/PublicCertific
   *                                                                           atePublicKey">
   *                                                                           /public/v1/certificate/public-key </a>.
   * @param webhookid              Unique Id to identify this webhook
   *                                                                           notification.
   * @param body
   * @return Response from the API call
   */
  async directEntryDishonour(
    authorization?: string,
    verificationSignature?: string,
    webhookid?: number,
    body?: EventDirectEntryDishonoursWebhook,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'POST',
      '/DIRECTENTRYDISHONOURSWEBHOOK_TARGET_URL'
    );
    const mapped = req.prepareArgs({
      authorization: [authorization, optional(string())],
      verificationSignature: [verificationSignature, optional(string())],
      webhookid: [webhookid, optional(number())],
      body: [body, optional(eventDirectEntryDishonoursWebhookSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('Authorization', mapped.authorization);
    req.header('Verification-Signature', mapped.verificationSignature);
    req.header('Webhookid', mapped.webhookid);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * Subscribing to the RTGS/IMT status event webhook will allow us to notify you when status of an
   * RTGS/IMT transaction changes. Event name:&nbsp;<strong>InboundRtgsImtStatus</strong> <br/>
   *
   * @param authorization
   * @param verificationSignature  This is a base64 encoded cryptographic
   *                                                                   signature that should be used<br/> to verify
   *                                                                   both the integrity of the message as well as the
   *                                                                   source (Monoova). <br/> The signature's hashing
   *                                                                   method is SHA256 and the public key can be
   *                                                                   retrieved from <a
   *                                                                   href="/payments#operation/PublicCertificatePubli
   *                                                                   cKey"> /public/v1/certificate/public-key </a>.
   * @param webhookid              Unique Id to identify this webhook notification.
   * @param body
   * @return Response from the API call
   */
  async inboundRtgsImtStatus(
    authorization?: string,
    verificationSignature?: string,
    webhookid?: number,
    body?: EventInboundRtgsImtStatus,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/RTGSIMTWEBHOOKSTATUS_TARGET_URL');
    const mapped = req.prepareArgs({
      authorization: [authorization, optional(string())],
      verificationSignature: [verificationSignature, optional(string())],
      webhookid: [webhookid, optional(number())],
      body: [body, optional(eventInboundRtgsImtStatusSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('Authorization', mapped.authorization);
    req.header('Verification-Signature', mapped.verificationSignature);
    req.header('Webhookid', mapped.webhookid);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * Subscribing to the npp return event webhook will allow us to notify you when an npp payment gets
   * returned is made. Event name:&nbsp;<strong>NppReturn</strong> <br/>
   *
   * @param authorization
   * @param verificationSignature  This is a base64 encoded cryptographic signature
   *                                                               that should be used<br/> to verify both the
   *                                                               integrity of the message as well as the source
   *                                                               (Monoova). <br/> The signature's hashing method is
   *                                                               SHA256 and the public key can be retrieved from <a
   *                                                               href="/payments#operation/PublicCertificatePublicKey
   *                                                               "> /public/v1/certificate/public-key </a>.
   * @param webhookid              Unique Id to identify this webhook notification.
   * @param body
   * @return Response from the API call
   */
  async nppReturn(
    authorization?: string,
    verificationSignature?: string,
    webhookid?: number,
    body?: EventNppReturnWebhook,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'POST',
      '/RECEIVENPPPAYMENTRETURN_TARGET_URL'
    );
    const mapped = req.prepareArgs({
      authorization: [authorization, optional(string())],
      verificationSignature: [verificationSignature, optional(string())],
      webhookid: [webhookid, optional(number())],
      body: [body, optional(eventNppReturnWebhookSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('Authorization', mapped.authorization);
    req.header('Verification-Signature', mapped.verificationSignature);
    req.header('Webhookid', mapped.webhookid);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * Subscribing to the Pending RTGS/IMT event webhook will allow us to notify you when a RTGS/IMT
   * transaction is received on one of your accounts. As RTGS/IMT transaction arrive in batches, you will
   * receive the data in an JSON array with multiple transactions multiple times per day. Event name:
   * &nbsp;<strong>PendingInboundRtgsImt</strong> <br/>
   *
   * @param authorization
   * @param verificationSignature  This is a base64 encoded cryptographic
   *                                                                    signature that should be used<br/> to verify
   *                                                                    both the integrity of the message as well as
   *                                                                    the source (Monoova). <br/> The signature's
   *                                                                    hashing method is SHA256 and the public key can
   *                                                                    be retrieved from <a
   *                                                                    href="/payments#operation/PublicCertificatePubl
   *                                                                    icKey"> /public/v1/certificate/public-key </a>.
   * @param webhookid              Unique Id to identify this webhook
   *                                                                    notification.
   * @param body
   * @return Response from the API call
   */
  async pendingInboundRtgsImt(
    authorization?: string,
    verificationSignature?: string,
    webhookid?: number,
    body?: EventPendingrtgsImtWebhook,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/PENDINGRTGSIMTWEBHOOK_TARGET_URL');
    const mapped = req.prepareArgs({
      authorization: [authorization, optional(string())],
      verificationSignature: [verificationSignature, optional(string())],
      webhookid: [webhookid, optional(number())],
      body: [body, optional(eventPendingrtgsImtWebhookSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('Authorization', mapped.authorization);
    req.header('Verification-Signature', mapped.verificationSignature);
    req.header('Webhookid', mapped.webhookid);
    req.json(mapped.body);
    return req.call(requestOptions);
  }
}
