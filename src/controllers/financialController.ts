/**
 * Monoova Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import {
  DTOGenericPaymentGatewayTransactionStatus2ResponseV2,
  dTOGenericPaymentGatewayTransactionStatus2ResponseV2Schema,
} from '../models/dTOGenericPaymentGatewayTransactionStatus2ResponseV2';
import {
  DTOGenericPaymentGatewayTransactionStatusResponseV2,
  dTOGenericPaymentGatewayTransactionStatusResponseV2Schema,
} from '../models/dTOGenericPaymentGatewayTransactionStatusResponseV2';
import {
  DTOGenericPaymentGatewayTransactionValidateV2,
  dTOGenericPaymentGatewayTransactionValidateV2Schema,
} from '../models/dTOGenericPaymentGatewayTransactionValidateV2';
import {
  DTOGenericPaymentGenericFinanceResponseV2,
  dTOGenericPaymentGenericFinanceResponseV2Schema,
} from '../models/dTOGenericPaymentGenericFinanceResponseV2';
import { optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class FinancialController extends BaseController {
  /**
   * You can use this API to determine if the parameters are correct. The body is the same as <a
   * href="/payments#operation/TransactionExecute"> /financial/v2/transaction/execute </a> endpoint. The
   * callerUniqueReference will be reusable after the validate call is complete. <br/> <strong> Note&#58;
   * </strong>  You DO NOT need to call this endpoint before an execute as all transactions will be
   * validated before they execute. This is useful if you are using a new rail and want to check your
   * parameters.
   *
   * @param body
   * @return Response from the API call
   */
  async transactionValidate(
    body?: unknown,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DTOGenericPaymentGatewayTransactionValidateV2>> {
    const req = this.createRequest(
      'POST',
      '/financial/v2/transaction/validate'
    );
    const mapped = req.prepareArgs({ body: [body, optional(unknown())] });
    req.json(mapped.body);
    req.throwOn(400, ApiError, 'Bad request');
    req.throwOn(500, ApiError, 'Internal Server Error');
    return req.callAsJson(
      dTOGenericPaymentGatewayTransactionValidateV2Schema,
      requestOptions
    );
  }

  /**
   * This API returns the status of a previous transaction. This is important because a directDebit
   * transaction could be dishonoured up to 3 days after the transaction was executed. We recommend <a
   * href="/payments#tag/Subscriptions"> subscribing to a webhook </a> to notify you when an dishonour
   * transaction is made.
   * <P> <strong> Example 1- Returns the status of a transaction that is <strong>‘Complete’</strong>
   * </strong> <br> Returns the status of an existing transaction </P> <img src="https:
   * //movdpwebsiteprodae.blob.core.windows.net/images/transaction_complete.PNG" alt="bank-ref"> <br>
   * <br>
   * <strong> Note  </strong> A direct debit transaction usually takes up to 3 days to be dishonoured.
   * Our system automatically marks the transactionStatus as Complete if the transaction has not yet been
   * dishonoured. For Direct Credits, the transactionStatus will always be Complete, please subscribe to
   * our webhook for dishonour notifications.
   * <P> <strong><u>For NPP Payouts:&nbsp;</u></strong> <br> <strong> Example 2- Returns the status of a
   * transaction that is <strong>‘Pending’</strong> </strong> <br> Returns the status of an NPP Payout
   * transaction that is waiting for update from our Banking institution </P> <img src="https:
   * //movdpwebsiteprodae.blob.core.windows.net/images/transaction_NPPPayPending.png" alt="bank-ref">
   * <P> <strong> Example 3- Returns the status of a transaction that is <strong>‘Rejected’</strong>
   * </strong> <br> Returns the status of an NPP Payout transaction that was in Pending state and later
   * got Rejected </P> <img src="https://movdpwebsiteprodae.blob.core.windows.
   * net/images/transaction_NPPPayRejected.png" alt="bank-ref">
   * <P> <strong><u>For Direct Debits:&nbsp;</u></strong> <br> <strong>  Example 4- Returns the status of
   * a transaction that has been <strong>‘Dishonoured’</strong> </strong> <br> Returns the status of an
   * existing transaction </p> <img src="https://movdpwebsiteprodae.blob.core.windows.
   * net/images/transaction_dishonoured.PNG" alt="bank-ref"> <p> <strong> Note  </strong> The transaction
   * is now dishonoured with the transactionStatus set to Dishonoured and the dishonouredDate has a value
   * of 2020-06-05. </p>
   * <P> <strong>  Example 5- Returns the status of a transaction that is
   * <strong>‘WaitingOnClearedFunds’</strong> </strong> <br> Returns the status of an existing
   * transaction (Transaction has made 2020-06-02) </p> <img src="https://movdpwebsiteprodae.blob.core.
   * windows.net/images/transaction_waitingOnClearedFunds.PNG" alt="bank-ref"> <p> Returns the status of
   * an existing transaction (Transaction has cleared 2020-06-05) </p> <img src="https:
   * //movdpwebsiteprodae.blob.core.windows.net/images/transaction_waitingOnClearedFundsCleared.png"
   * alt="bank-ref"> <p> <strong> Note  </strong> Total balance for all direct debits waiting to be
   * complete will be shown as the balance under 'Uncleared'. The Cleared Funds balance will show the
   * total balance of all cleared funds and is able to be used. </p> <br>
   *
   * @param uniqueReference This is your uniqueReference that was passed in when the transaction was
   *                                  executed
   * @return Response from the API call
   */
  async transactionStatusByUid(
    uniqueReference: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DTOGenericPaymentGatewayTransactionStatusResponseV2>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      uniqueReference: [uniqueReference, string()],
    });
    req.appendTemplatePath`/financial/v2/status/${mapped.uniqueReference}`;
    req.throwOn(400, ApiError, 'Bad request');
    req.throwOn(500, ApiError, 'Internal Server Error');
    return req.callAsJson(
      dTOGenericPaymentGatewayTransactionStatusResponseV2Schema,
      requestOptions
    );
  }

  /**
   * This API returns the status of the specific date of the transactions. This is important because a
   * directDebit transaction could be dishonoured up to 3 days after the transaction was executed.
   *
   * @param startDate This is the startDate. date format should be 'yyyy-MM-dd'
   * @param endDate   This is the endDate. date format should be 'yyyy-MM-dd'
   * @return Response from the API call
   */
  async transactionStatusByDate(
    startDate: string,
    endDate: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DTOGenericPaymentGatewayTransactionStatus2ResponseV2>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      startDate: [startDate, string()],
      endDate: [endDate, string()],
    });
    req.appendTemplatePath`/financial/v2/status/${mapped.startDate}/${mapped.endDate}`;
    req.throwOn(400, ApiError, 'Bad request');
    req.throwOn(500, ApiError, 'Internal Server Error');
    return req.callAsJson(
      dTOGenericPaymentGatewayTransactionStatus2ResponseV2Schema,
      requestOptions
    );
  }

  /**
   * The purpose of the execute API is to debit a source for funds then distribute those funds to one or
   * more supplied disbursement accounts. You can use the <a
   * href="/payments#operation/TransactionValidate"> /financial/v2/transaction/validate </a> endpoint to
   * determine if the parameters are correct. <br/> <br/> <strong> NPP Payment Pending Status</strong>
   * <br/> If you are returned a status of ‘Pending’ for an NPP payout, this means that we are waiting
   * for confirmation that the payment has been processed by the processor.
   *
   * @param body
   * @return Response from the API call
   */
  async transactionExecute(
    body?: unknown,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DTOGenericPaymentGenericFinanceResponseV2>> {
    const req = this.createRequest('POST', '/financial/v2/transaction/execute');
    const mapped = req.prepareArgs({ body: [body, optional(unknown())] });
    req.json(mapped.body);
    req.throwOn(400, ApiError, 'Bad request');
    req.throwOn(500, ApiError, 'Internal Server Error');
    return req.callAsJson(
      dTOGenericPaymentGenericFinanceResponseV2Schema,
      requestOptions
    );
  }
}
