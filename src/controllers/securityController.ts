/**
 * Monoova Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import {
  DTOGenericPaymentCreateOneShotSecurityTokenResponseV1,
  dTOGenericPaymentCreateOneShotSecurityTokenResponseV1Schema,
} from '../models/dTOGenericPaymentCreateOneShotSecurityTokenResponseV1';
import {
  DTOGenericPaymentSettingsResponseV1,
  dTOGenericPaymentSettingsResponseV1Schema,
} from '../models/dTOGenericPaymentSettingsResponseV1';
import { number, optional, string } from '../schema';
import { BaseController } from './baseController';

export class SecurityController extends BaseController {
  /**
   * This API returns the fees and permissions that have been given to the Sign-In Account.
   *
   * @return Response from the API call
   */
  async securitySignInAccountSettings(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DTOGenericPaymentSettingsResponseV1>> {
    const req = this.createRequest('GET', '/security/v1/signInAccountSettings');
    req.throwOn(400, ApiError, 'Bad request');
    req.throwOn(500, ApiError, 'Internal Server Error');
    return req.callAsJson(
      dTOGenericPaymentSettingsResponseV1Schema,
      requestOptions
    );
  }

  /**
   * This API returns a security token that can be used only once or until it expires.  The purpose of
   * this token is that it can be embedded in a web form to enable you to make a single call to the
   * Engine without exposing your Sign-In Account credentials. When setting your security credentials to
   * call any of the APIs in this document (except for security/v1/createOneShotToken and
   * security/v1/createSecurityToken),  set the Username to the returned OneShotSecurityToken and set the
   * password to anything as it will be ignored. If you create the token and no longer require it, call
   * security/v1/deleteSecurityToken to have the token removed.
   *
   * @param timeOutMin  Each token has an expiry time between 1 and 15 minutes
   * @param tokenClaims This is Optional. Passing a 'Token' in parameter to generate restricted Token which
   *                              only allows user to create Token. Currently Available parameters are 'Admin' and
   *                              'Token'
   * @return Response from the API call
   */
  async securityCreateOneShotSecurityToken(
    timeOutMin: number,
    tokenClaims?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DTOGenericPaymentCreateOneShotSecurityTokenResponseV1>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      timeOutMin: [timeOutMin, number()],
      tokenClaims: [tokenClaims, optional(string())],
    });
    req.query('TokenClaims', mapped.tokenClaims);
    req.appendTemplatePath`/security/v1/createOneShotSecurityToken/${mapped.timeOutMin}`;
    req.throwOn(400, ApiError, 'Bad request');
    req.throwOn(500, ApiError, 'Internal Server Error');
    return req.callAsJson(
      dTOGenericPaymentCreateOneShotSecurityTokenResponseV1Schema,
      requestOptions
    );
  }
}
