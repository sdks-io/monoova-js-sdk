/**
 * Monoova Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import {
  DTOToolsAbnValidateResponseV1,
  dTOToolsAbnValidateResponseV1Schema,
} from '../models/dTOToolsAbnValidateResponseV1';
import {
  DTOToolsBsbValidateResponseV1,
  dTOToolsBsbValidateResponseV1Schema,
} from '../models/dTOToolsBsbValidateResponseV1';
import {
  DTOToolsPingResponseV1,
  dTOToolsPingResponseV1Schema,
} from '../models/dTOToolsPingResponseV1';
import {
  DTOToolsSendEmailResponseV1,
  dTOToolsSendEmailResponseV1Schema,
} from '../models/dTOToolsSendEmailResponseV1';
import {
  ToolsSendEmailToIssuer,
  toolsSendEmailToIssuerSchema,
} from '../models/toolsSendEmailToIssuer';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class ToolsController extends BaseController {
  /**
   * The primary purpose of the ping API is to validate your credentials as well validate that the Engine
   * servers are up and running.
   *
   * @return Response from the API call
   */
  async toolsPing(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DTOToolsPingResponseV1>> {
    const req = this.createRequest('GET', '/tools/v1/ping');
    req.throwOn(400, ApiError, 'Bad request');
    req.throwOn(500, ApiError, 'Internal Server Error');
    return req.callAsJson(dTOToolsPingResponseV1Schema, requestOptions);
  }

  /**
   * The purpose of this API is to provide email functionality for your application to send emails to the
   * Sign-In Accounts Issuer.
   *
   * @param body
   * @return Response from the API call
   */
  async toolsSendEmailToIssuer(
    body?: ToolsSendEmailToIssuer,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DTOToolsSendEmailResponseV1>> {
    const req = this.createRequest('POST', '/tools/v1/sendEmailToIssuer');
    const mapped = req.prepareArgs({
      body: [body, optional(toolsSendEmailToIssuerSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ApiError, 'Bad request');
    req.throwOn(500, ApiError, 'Internal Server Error');
    return req.callAsJson(dTOToolsSendEmailResponseV1Schema, requestOptions);
  }

  /**
   * The purpose of this API is to return details about a BSB (Bank-State-Branch) number. The format is a
   * string in the following format:&nbsp;‘999-999’.
   *
   * @param bsbNumber BSB (Bank-State-Branch) number. The format is a string in the following format:&nbsp;
   *                            ‘999-999’.
   * @return Response from the API call
   */
  async toolsBsbValidate(
    bsbNumber: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DTOToolsBsbValidateResponseV1>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ bsbNumber: [bsbNumber, string()] });
    req.appendTemplatePath`/tools/v1/bsbValidate/${mapped.bsbNumber}`;
    req.throwOn(400, ApiError, 'Bad request');
    req.throwOn(500, ApiError, 'Internal Server Error');
    return req.callAsJson(dTOToolsBsbValidateResponseV1Schema, requestOptions);
  }

  /**
   * The purpose of this API is to validate that an ABN (Australian Business Number) is correct and
   * determine if it’s valid.&nbsp; This API makes a call to the Australian Business Registry returning
   * current details about the company.&nbsp; An ABN is defined as a string of eleven numeric digits.
   * Spaces are allowed but no other characters.&nbsp; If the resulting status property contains ‘Ok’
   * then examine the property isAbnValid.&nbsp; The property isCharity will be true if the entity is an
   * active registered charity.&nbsp; A list of codes and more information is available at http://abr.
   * business.gov.au/Documentation/ReferenceData
   *
   * @param abnNumber ABN (Australian Business Number)
   * @return Response from the API call
   */
  async toolsAbnValidate(
    abnNumber: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DTOToolsAbnValidateResponseV1>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ abnNumber: [abnNumber, string()] });
    req.appendTemplatePath`/tools/v1/abnValidate/${mapped.abnNumber}`;
    req.throwOn(400, ApiError, 'Bad request');
    req.throwOn(500, ApiError, 'Internal Server Error');
    return req.callAsJson(dTOToolsAbnValidateResponseV1Schema, requestOptions);
  }
}
